/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Context, ContextInterface } from "../Context";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c332228989f2669cb7ff74476cd72638ea1accec6cd9303fed2f4fd63572e8f664736f6c63430008010033";

type ContextConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContextConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Context__factory extends ContractFactory {
  constructor(...args: ContextConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Context";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Context> {
    return super.deploy(overrides || {}) as Promise<Context>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Context {
    return super.attach(address) as Context;
  }
  connect(signer: Signer): Context__factory {
    return super.connect(signer) as Context__factory;
  }
  static readonly contractName: "Context";
  public readonly contractName: "Context";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContextInterface {
    return new utils.Interface(_abi) as ContextInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Context {
    return new Contract(address, _abi, signerOrProvider) as Context;
  }
}
